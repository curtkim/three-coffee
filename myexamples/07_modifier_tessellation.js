// Generated by CoffeeScript 1.7.1
(function() {
  var animate, camera, container, controls, init, mesh, render, renderer, scene, uniforms;

  container = null;

  camera = null;

  scene = null;

  renderer = null;

  mesh = null;

  controls = null;

  uniforms = null;

  init = function() {
    var attributes, colors, d, displacement, explodeModifier, f, face, geometry, h, i, l, nv, s, shaderMaterial, tessellateModifier, v, vertices, x, y, z, _i, _j, _k, _ref;
    container = document.getElementById('container');
    camera = new THREE.PerspectiveCamera(25, window.innerWidth / window.innerHeight, 1, 10000);
    camera.position.z = 350;
    scene = new THREE.Scene();
    attributes = {
      displacement: {
        type: 'v3',
        value: []
      },
      customColor: {
        type: 'c',
        value: []
      }
    };
    uniforms = {
      amplitude: {
        type: "f",
        value: 0.0
      }
    };
    shaderMaterial = new THREE.ShaderMaterial({
      uniforms: uniforms,
      attributes: attributes,
      shading: THREE.FlatShading,
      side: THREE.DoubleSide,
      vertexShader: 'uniform float amplitude;\nattribute vec3 customColor;\nattribute vec3 displacement;\nvarying vec3 vNormal;\nvarying vec3 vColor;\nvoid main() {\n  vNormal = normal;\n  vColor = customColor;\n  vec3 newPosition = position + amplitude * displacement;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n}',
      fragmentShader: 'varying vec3 vNormal;\nvarying vec3 vColor;\nvoid main() {\n  const float ambient = 0.005;\n  vec3 light = vec3( 1.0 );\n  light = normalize( light );\n  float directional = max( dot( vNormal, light ), 0.0 );\n  gl_FragColor = vec4( ( directional + ambient ) * vColor, 1.0 );\n  gl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n}'
    });

    /*
    geometry = new THREE.TextGeometry( "THREE.JS", {
      size: 40
      height: 5
      curveSegments: 3
      font: "helvetiker"
      weight: "bold"
      style: "normal"
      bevelThickness: 2
      bevelSize: 1
      bevelEnabled: true
    })
     */
    geometry = new THREE.BoxGeometry(40, 40, 40);
    geometry.dynamic = true;
    geometry.center();
    tessellateModifier = new THREE.TessellateModifier(8);
    for (i = _i = 0; _i < 6; i = ++_i) {
      tessellateModifier.modify(geometry);
    }
    explodeModifier = new THREE.ExplodeModifier();
    explodeModifier.modify(geometry);
    vertices = geometry.vertices;
    colors = attributes.customColor.value;
    displacement = attributes.displacement.value;
    v = 0;
    for (f = _j = 0, _ref = geometry.faces.length; 0 <= _ref ? _j < _ref : _j > _ref; f = 0 <= _ref ? ++_j : --_j) {
      face = geometry.faces[f];
      nv = face instanceof THREE.Face3 ? 3 : 4;
      h = 0.15 * Math.random();
      s = 0.5 + 0.5 * Math.random();
      l = 0.5 + 0.5 * Math.random();
      d = 10 * (0.5 - Math.random());
      x = 2 * (0.5 - Math.random());
      y = 2 * (0.5 - Math.random());
      z = 2 * (0.5 - Math.random());
      for (i = _k = 0; 0 <= nv ? _k < nv : _k > nv; i = 0 <= nv ? ++_k : --_k) {
        colors[v] = new THREE.Color();
        displacement[v] = new THREE.Vector3();
        colors[v].setHSL(h, s, l);
        colors[v].convertGammaToLinear();
        displacement[v].set(x, y, z);
        v += 1;
      }
    }
    console.log("faces", geometry.faces.length);
    mesh = new THREE.Mesh(geometry, shaderMaterial);
    mesh.rotation.set(0.5, 0.5, 0);
    scene.add(mesh);
    renderer = new THREE.WebGLRenderer({
      antialias: true
    });
    renderer.setClearColor(0x050505);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);
    return controls = new THREE.TrackballControls(camera);
  };

  animate = function() {
    requestAnimationFrame(animate);
    return render();
  };

  render = function() {
    var time;
    time = Date.now() * 0.001;
    uniforms.amplitude.value = Math.sin(time * 0.5);
    controls.update();
    return renderer.render(scene, camera);
  };

  init();

  animate();

}).call(this);
