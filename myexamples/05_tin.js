// Generated by CoffeeScript 1.7.1
(function() {
  var animate, camera, container, controls, init, mesh, render, renderer, scene;

  container = null;

  camera = null;

  scene = null;

  renderer = null;

  mesh = null;

  controls = null;

  init = function() {
    var colors, geometry, idx, indices, light1, normals, positions, x, y, _i, _j, _k, _l, _m, _n;
    container = document.getElementById('container');
    camera = new THREE.PerspectiveCamera(27, window.innerWidth / window.innerHeight, 1, 3500);
    camera.position.z = 5;
    scene = new THREE.Scene();
    scene.fog = new THREE.Fog(0x050505, 2000, 3500);
    scene.add(new THREE.AmbientLight(0x444444));
    light1 = new THREE.DirectionalLight(0xffffff, 0.5);
    light1.position.set(1, 1, 1);
    scene.add(light1);
    geometry = new THREE.BufferGeometry();
    indices = new Uint16Array(3 * 8);
    positions = new Float32Array(3 * 9);
    normals = new Float32Array(3 * 9);
    colors = new Float32Array(3 * 9);
    idx = 0;
    for (y = _i = -1; _i <= 1; y = ++_i) {
      for (x = _j = -1; _j <= 1; x = ++_j) {
        positions[idx++] = x;
        positions[idx++] = y;
        positions[idx++] = 0;
      }
    }
    positions[3 * 4] = 0;
    positions[3 * 4 + 1] = 0;
    positions[3 * 4 + 2] = 1;
    idx = 0;
    for (y = _k = -1; _k <= 1; y = ++_k) {
      for (x = _l = -1; _l <= 1; x = ++_l) {
        normals[idx++] = 0;
        normals[idx++] = 0;
        normals[idx++] = 1;
      }
    }
    idx = 0;
    for (y = _m = -1; _m <= 1; y = ++_m) {
      for (x = _n = -1; _n <= 1; x = ++_n) {
        colors[idx++] = 0;
        colors[idx++] = 1;
        colors[idx++] = 0;
      }
    }
    colors[3 * 4] = 1;
    colors[3 * 4 + 1] = 0;
    colors[3 * 4 + 2] = 0;
    idx = 0;
    indices[idx++] = 0;
    indices[idx++] = 1;
    indices[idx++] = 4;
    indices[idx++] = 0;
    indices[idx++] = 4;
    indices[idx++] = 3;
    indices[idx++] = 3;
    indices[idx++] = 4;
    indices[idx++] = 7;
    indices[idx++] = 3;
    indices[idx++] = 7;
    indices[idx++] = 6;
    indices[idx++] = 1;
    indices[idx++] = 2;
    indices[idx++] = 5;
    indices[idx++] = 1;
    indices[idx++] = 5;
    indices[idx++] = 4;
    indices[idx++] = 4;
    indices[idx++] = 5;
    indices[idx++] = 8;
    indices[idx++] = 4;
    indices[idx++] = 8;
    indices[idx++] = 7;
    geometry.addAttribute('index', new THREE.BufferAttribute(indices, 1));
    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.addAttribute('normal', new THREE.BufferAttribute(normals, 3));
    geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));
    geometry.computeBoundingSphere();
    mesh = new THREE.Mesh(geometry, new THREE.MeshPhongMaterial({
      color: 0xaaaaaa,
      ambient: 0xaaaaaa,
      specular: 0xffffff,
      shininess: 250,
      side: THREE.DoubleSide,
      vertexColors: THREE.VertexColors
    }));
    scene.add(mesh);
    renderer = new THREE.WebGLRenderer({
      antialias: false
    });
    renderer.setClearColor(scene.fog.color);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    container.appendChild(renderer.domElement);
    return controls = new THREE.TrackballControls(camera);
  };

  animate = function() {
    requestAnimationFrame(animate);
    return render();
  };

  render = function() {
    var time;
    time = Date.now() * 0.001;
    controls.update();
    return renderer.render(scene, camera);
  };

  init();

  animate();

}).call(this);
